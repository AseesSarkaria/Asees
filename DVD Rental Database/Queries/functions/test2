CREATE OR REPLACE FUNCTION apply_function_to_table(
    table_name TEXT,            -- The name of the table or view
    transform_function TEXT     -- The transformation function to apply (e.g., 'ROUND', 'UPPER')
) RETURNS SETOF RECORD AS $$
DECLARE
    dynamic_query TEXT;         -- To hold the dynamically constructed query
    column_definitions TEXT;    -- To store the string of column transformations
    column_list TEXT;           -- To store the list of columns for the final SELECT query
BEGIN
    -- Build the dynamic SQL by iterating over all columns of the table
    SELECT STRING_AGG(
        CASE 
            WHEN data_type IN ('integer', 'numeric', 'real', 'double precision') THEN 
                format('%s(%s) AS %s', transform_function, column_name, column_name)  -- Apply the function to numeric columns
            WHEN data_type IN ('character varying', 'text', 'char') THEN 
                format('%s(%s) AS %s', transform_function, column_name, column_name)  -- Apply the function to text columns
            ELSE 
                column_name  -- For other data types, leave the column as-is
        END, ', ')
    INTO column_definitions
    FROM information_schema.columns
    WHERE table_name = table_name;

    -- Construct the full SELECT query
    dynamic_query := format('SELECT %s FROM %s', column_definitions, table_name);

    -- Execute the dynamic query and return the result
    RETURN QUERY EXECUTE dynamic_query;
END $$ LANGUAGE plpgsql;
